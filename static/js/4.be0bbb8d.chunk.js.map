{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","id","config","form","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.be0bbb8d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch ( props.elementType ) {\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={classes.InputElement} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n            <select className={classes.InputElement} value={props.value} onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input className={classes.InputElement} {...props.elementConfig} value={props.value} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__NdT05\",\"Label\":\"Input_Label__5ue-q\",\"InputElement\":\"Input_InputElement__3SDfR\",\"Invalid\":\"Input_Invalid__1Hxyn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Pxh1\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount () {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    // checkValidity (value, rules) {\r\n    //     let isValid = true;\r\n\r\n    //     if (!rules) {\r\n    //         return true;\r\n    //     }\r\n\r\n    //     if (rules.required) {\r\n    //         isValid = value.trim() !== '' && isValid;\r\n    //     }\r\n\r\n    //     if (rules.minLength) {\r\n    //         isValid = value.length >= rules.minLength && isValid;\r\n    //     }\r\n\r\n    //     if (rules.maxLength) {\r\n    //         isValid = value.length <= rules.maxLength && isValid;\r\n    //     }\r\n\r\n    //     if (rules.isEmail) {\r\n    //         const pattern = /[a-z0-9!]/;\r\n    //         isValid = pattern.test(value) && isValid;\r\n    //     }\r\n\r\n    //     if (rules.isNumeric) {\r\n    //         const pattern = /^\\d+$/;\r\n    //         isValid = pattern.test(value) && isValid;\r\n    //     }\r\n\r\n    //     return isValid;\r\n    // }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            // ...this.state.controls,\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                // ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup};\r\n        });\r\n    };\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        };\r\n\r\n        let authRedirect = null;\r\n\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n        };\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}