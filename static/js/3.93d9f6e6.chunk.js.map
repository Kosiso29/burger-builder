{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","ZipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","console","log","setState","formElementsArray","key","this","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.93d9f6e6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch ( props.elementType ) {\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={classes.InputElement} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n            <select className={classes.InputElement} value={props.value} onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input className={classes.InputElement} {...props.elementConfig} value={props.value} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__NdT05\",\"Label\":\"Input_Label__5ue-q\",\"InputElement\":\"Input_InputElement__3SDfR\",\"Invalid\":\"Input_Invalid__1Hxyn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2ECMO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1cROK\"};","import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\" \r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\" \r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            ZipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP CODE'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                // validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n        // loading: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        // this.setState({loading: true});\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order, this.props.token);\r\n        // axios.post('/orders.json', order)\r\n        //     .then(response => {\r\n        //         this.setState({loading: false});\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(error => {\r\n        //         this.setState({loading: false});\r\n        //     });\r\n    }\r\n\r\n    // checkValidity (value, rules) {\r\n    //     let isValid = true;\r\n\r\n    //     if (!rules) {\r\n    //         return true;\r\n    //     }\r\n\r\n    //     if (rules.required) {\r\n    //         isValid = value.trim() !== '' && isValid;\r\n    //     }\r\n\r\n    //     if (rules.minLength) {\r\n    //         isValid = value.length >= rules.minLength && isValid;\r\n    //     }\r\n\r\n    //     if (rules.maxLength) {\r\n    //         isValid = value.length <= rules.maxLength && isValid;\r\n    //     }\r\n\r\n    //     return isValid;\r\n    // }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        // const updatedOrderForm = {\r\n        //     ...this.state.orderForm\r\n        // };\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            // ...updatedOrderForm[inputIdentifier]\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n\r\n        // updatedFormElement.value = event.target.value;\r\n        // updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        // updatedFormElement.touched = true;\r\n        // updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n        \r\n        let formIsValid = true;\r\n\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        console.log(formIsValid);\r\n\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid} /*clicked={this.orderHandler}*/>ORDER</Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n// import * as actions from \"../../store/actions\";\r\n\r\nclass Checkout extends Component {\r\n    // state={\r\n    //     ingredients: {\r\n    //         meat: 0,\r\n    //         salad: 0,\r\n    //         bacon: 0,\r\n    //         cheese: 0\r\n    //     },\r\n    //     totalPrice: 0\r\n    // }\r\n\r\n    // componentWillMount () {\r\n    //     this.props.onInitPurchase();\r\n    // }\r\n\r\n    // componentDidMount () {\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n    //     const ingredients = {};\r\n    //     let price = 0;\r\n    //     for (let param of query.entries()) {\r\n    //         // ['salad', '1']\r\n    //         if(param[0] === 'price') {\r\n    //             price = param[1];\r\n    //         } else {\r\n    //             ingredients[param[0]] = +param[1];\r\n    //         }            \r\n    //     }\r\n    //     this.setState({ingredients: ingredients, totalPrice: price});\r\n    // }\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render () {\r\n        let summary = <Redirect to=\"/\" />\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route \r\n                    path={this.props.match.path + '/contact-data'} \r\n                    // render={(props) => (<ContactData ingredients={this.state.ingredients} price={this.props.price} {...props} />)} />\r\n                    component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onInitPurchase: () => dispatch(actions.purchaseInit())\r\n//     }\r\n// }\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}